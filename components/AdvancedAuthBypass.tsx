import React, { useState } from 'react';
import { Button } from './ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Badge } from './ui/badge';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from './ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { AlertTriangle, Shield, Zap, Copy, ExternalLink, CheckCircle, Settings, Terminal } from 'lucide-react';
import { toast } from 'sonner@2.0.3';

export function AdvancedAuthBypass() {
  const [isOpen, setIsOpen] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);

  const authBypassMethods = [
    {
      id: 'project-settings',
      title: 'Supabase Project Settings',
      difficulty: 'Easy',
      description: 'Disable authentication enforcement at project level',
      status: 'recommended'
    },
    {
      id: 'function-config',
      title: 'Enhanced Function Config',
      difficulty: 'Medium', 
      description: 'Advanced config.toml settings with multiple auth options',
      status: 'current'
    },
    {
      id: 'anon-key-method',
      title: 'Anonymous Key Override',
      difficulty: 'Medium',
      description: 'Force public access using anon key validation',
      status: 'alternative'
    },
    {
      id: 'edge-function-rewrite',
      title: 'Complete Auth Bypass',
      difficulty: 'Advanced',
      description: 'Rewrite function to completely bypass all authentication',
      status: 'nuclear'
    }
  ];

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast.success('Copied to clipboard!');
    } catch (err) {
      toast.error('Failed to copy');
    }
  };

  const projectSettingsInstructions = `
# üéØ METHOD 1: SUPABASE PROJECT SETTINGS (RECOMMENDED)

## Step 1: Access Supabase Dashboard
1. Go to https://supabase.com/dashboard
2. Select your project
3. Navigate to Settings ‚Üí API

## Step 2: Disable Authentication Enforcement
1. Go to Settings ‚Üí Authentication  
2. Find "Site URL" settings
3. Add your development URLs to allowed origins
4. Go to Settings ‚Üí API
5. Look for "JWT Settings" or "Authentication Settings"
6. Disable "Enforce JWT on Edge Functions" if available

## Step 3: Update RLS Policies (if needed)
1. Go to Authentication ‚Üí Policies
2. Temporarily disable RLS on affected tables
3. Or create permissive policies for testing

## Step 4: Test Endpoints
After changes, test your function:
https://YOUR_PROJECT_ID.supabase.co/functions/v1/make-server-0b7c7173/health
`.trim();

  const enhancedConfigToml = `
# üéØ METHOD 2: ENHANCED CONFIG.TOML

[functions]
# Disable JWT verification
verify_jwt = false

# Additional settings to try
[functions.make-server-0b7c7173]
verify_jwt = false
cors = true
allow_anonymous = true

[auth]
# Disable auth enforcement globally
enabled = false
require_email_verification = false

[api]
# Enable anonymous access
enable_anonymous_sign_ins = true
allow_anonymous_access = true

# Custom headers for bypassing auth
[functions.headers]
"Access-Control-Allow-Origin" = "*"
"Access-Control-Allow-Methods" = "*"
"Access-Control-Allow-Headers" = "*"
`.trim();

  const anonKeyBypassCode = `
// üéØ METHOD 3: ANONYMOUS KEY OVERRIDE
// Add this to the top of your function (index.ts)

// Force bypass all auth checks
const BYPASS_ALL_AUTH = true;

const handleRequest = async (request: Request): Promise<Response> => {
  console.log('üîì AUTH BYPASS MODE - No authentication required');
  
  // Immediate CORS response
  const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, PUT, DELETE',
    'Access-Control-Allow-Headers': '*',
    'Access-Control-Max-Age': '86400',
  };

  if (request.method === 'OPTIONS') {
    return new Response(null, { status: 200, headers: corsHeaders });
  }

  // Skip ALL authentication for ANY endpoint
  if (BYPASS_ALL_AUTH) {
    console.log('üîì Bypassing authentication for all endpoints');
    
    // Your existing endpoint logic here, but without any auth checks
    const url = new URL(request.url);
    const path = url.pathname;

    if (path.includes('/health')) {
      return new Response(JSON.stringify({
        status: 'ok',
        message: 'Auth bypass successful',
        timestamp: new Date().toISOString(),
        authBypass: true
      }), {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    // Handle other endpoints without auth...
  }

  // Rest of your function logic
};

Deno.serve(handleRequest);
`.trim();

  const nuclearOption = `
// üéØ METHOD 4: NUCLEAR OPTION - COMPLETE AUTH BYPASS
// Replace your entire function with this ultra-minimal version

console.log('üöÄ NUCLEAR AUTH BYPASS - Zero authentication');

const ultraMinimalHandler = (request: Request): Response => {
  const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': '*',
    'Access-Control-Allow-Headers': '*',
  };

  // Handle CORS
  if (request.method === 'OPTIONS') {
    return new Response(null, { status: 200, headers: corsHeaders });
  }

  // All endpoints return success
  return new Response(JSON.stringify({
    success: true,
    message: 'Nuclear auth bypass active',
    method: request.method,
    url: request.url,
    timestamp: new Date().toISOString(),
    authStatus: 'completely-disabled'
  }), {
    status: 200,
    headers: { ...corsHeaders, 'Content-Type': 'application/json' }
  });
};

// Start with zero dependencies
Deno.serve(ultraMinimalHandler);
`.trim();

  const supabaseProjectCommands = `
# Test your project after applying settings
curl -X GET "https://YOUR_PROJECT_ID.supabase.co/functions/v1/make-server-0b7c7173/health"

# Should return 200 status instead of 401
# If still 401, try the next method
`.trim();

  return (
    <>
      <Button
        onClick={() => setIsOpen(true)}
        className="bg-red-600 hover:bg-red-700 text-white flex items-center gap-2"
        size="lg"
      >
        <Shield className="w-5 h-5" />
        üîì Advanced Auth Bypass
      </Button>

      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2 text-xl">
              <Shield className="w-6 h-6 text-red-600" />
              Advanced Authentication Bypass Solutions
            </DialogTitle>
            <DialogDescription>
              Multiple methods to resolve persistent 401 errors even with verify_jwt = false
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4">
            {/* Status Alert */}
            <Card className="border-red-200 bg-red-50">
              <CardContent className="p-4">
                <div className="flex items-center gap-2 text-red-700 mb-2">
                  <AlertTriangle className="w-5 h-5" />
                  <strong>Current Status: 401 Errors Persist</strong>
                </div>
                <div className="text-sm text-red-600 space-y-1">
                  <div>‚ùå Function Config: verify_jwt = false (not working)</div>
                  <div>‚ùå CORS: Working (200) but auth still blocks requests</div>
                  <div>‚ùå Root Endpoints: Still returning 401</div>
                  <div className="mt-2 font-medium">
                    üéØ Diagnosis: Supabase project-level authentication enforcement
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Method Overview */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {authBypassMethods.map((method, index) => (
                <Card key={method.id} className={`border-2 ${
                  method.status === 'recommended' ? 'border-green-300 bg-green-50' :
                  method.status === 'current' ? 'border-blue-300 bg-blue-50' :
                  method.status === 'alternative' ? 'border-orange-300 bg-orange-50' :
                  'border-red-300 bg-red-50'
                }`}>
                  <CardHeader className="pb-3">
                    <div className="flex items-center justify-between">
                      <CardTitle className="text-sm">{method.title}</CardTitle>
                      <Badge variant={
                        method.status === 'recommended' ? 'default' :
                        method.status === 'current' ? 'secondary' :
                        method.status === 'alternative' ? 'outline' :
                        'destructive'
                      }>
                        {method.difficulty}
                      </Badge>
                    </div>
                    <CardDescription className="text-xs">
                      {method.description}
                    </CardDescription>
                  </CardHeader>
                </Card>
              ))}
            </div>

            {/* Detailed Solutions */}
            <Tabs defaultValue="project-settings" className="w-full">
              <TabsList className="grid w-full grid-cols-4">
                <TabsTrigger value="project-settings" className="text-xs">
                  <Settings className="w-4 h-4 mr-1" />
                  Project
                </TabsTrigger>
                <TabsTrigger value="config" className="text-xs">
                  <Terminal className="w-4 h-4 mr-1" />
                  Config
                </TabsTrigger>
                <TabsTrigger value="anon-key" className="text-xs">
                  <Zap className="w-4 h-4 mr-1" />
                  Override
                </TabsTrigger>
                <TabsTrigger value="nuclear" className="text-xs">
                  <AlertTriangle className="w-4 h-4 mr-1" />
                  Nuclear
                </TabsTrigger>
              </TabsList>

              <TabsContent value="project-settings" className="space-y-4">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-green-700">
                      <CheckCircle className="w-5 h-5" />
                      Method 1: Supabase Project Settings (Recommended)
                    </CardTitle>
                    <CardDescription>
                      Fix authentication at the project level in Supabase Dashboard
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="bg-gray-900 text-green-400 p-4 rounded font-mono text-sm whitespace-pre-wrap mb-4">
                      {projectSettingsInstructions}
                    </div>
                    <div className="flex gap-2">
                      <Button onClick={() => copyToClipboard(projectSettingsInstructions)} variant="outline" size="sm">
                        <Copy className="w-4 h-4 mr-2" />
                        Copy Instructions
                      </Button>
                      <Button onClick={() => window.open('https://supabase.com/dashboard', '_blank')} variant="outline" size="sm">
                        <ExternalLink className="w-4 h-4 mr-2" />
                        Open Dashboard
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="config" className="space-y-4">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-blue-700">
                      <Terminal className="w-5 h-5" />
                      Method 2: Enhanced config.toml
                    </CardTitle>
                    <CardDescription>
                      Advanced configuration with multiple auth bypass settings
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="bg-gray-900 text-green-400 p-4 rounded font-mono text-sm whitespace-pre-wrap mb-4">
                      {enhancedConfigToml}
                    </div>
                    <div className="flex gap-2">
                      <Button onClick={() => copyToClipboard(enhancedConfigToml)} variant="outline" size="sm">
                        <Copy className="w-4 h-4 mr-2" />
                        Copy Config
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="anon-key" className="space-y-4">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-orange-700">
                      <Zap className="w-5 h-5" />
                      Method 3: Function-Level Bypass
                    </CardTitle>
                    <CardDescription>
                      Modify your function code to bypass all authentication
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="bg-gray-900 text-green-400 p-4 rounded font-mono text-sm whitespace-pre-wrap mb-4">
                      {anonKeyBypassCode}
                    </div>
                    <div className="flex gap-2">
                      <Button onClick={() => copyToClipboard(anonKeyBypassCode)} variant="outline" size="sm">
                        <Copy className="w-4 h-4 mr-2" />
                        Copy Code
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="nuclear" className="space-y-4">
                <Card className="border-red-200 bg-red-50">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-red-700">
                      <AlertTriangle className="w-5 h-5" />
                      Method 4: Nuclear Option (Last Resort)
                    </CardTitle>
                    <CardDescription>
                      Replace entire function with ultra-minimal auth-free version
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="bg-gray-900 text-green-400 p-4 rounded font-mono text-sm whitespace-pre-wrap mb-4">
                      {nuclearOption}
                    </div>
                    <div className="flex gap-2">
                      <Button onClick={() => copyToClipboard(nuclearOption)} variant="outline" size="sm">
                        <Copy className="w-4 h-4 mr-2" />
                        Copy Nuclear Code
                      </Button>
                    </div>
                    <div className="mt-3 p-3 bg-red-100 border border-red-300 rounded text-sm text-red-700">
                      ‚ö†Ô∏è <strong>Warning:</strong> This completely replaces your function with a minimal version. 
                      Use only if other methods fail. Back up your original code first.
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>

            {/* Testing Instructions */}
            <Card className="border-blue-200 bg-blue-50">
              <CardHeader>
                <CardTitle className="text-blue-700">üß™ Testing After Each Method</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="bg-gray-900 text-green-400 p-4 rounded font-mono text-sm whitespace-pre-wrap">
                  {supabaseProjectCommands}
                </div>
                <div className="mt-3 text-sm text-blue-700">
                  <strong>Success indicators:</strong>
                  <ul className="list-disc list-inside mt-1 space-y-1">
                    <li>Status 200 instead of 401</li>
                    <li>JSON response with actual data</li>
                    <li>No authentication error messages</li>
                  </ul>
                </div>
              </CardContent>
            </Card>
          </div>

          <DialogFooter>
            <Button onClick={() => setIsOpen(false)} variant="outline">
              Close
            </Button>
            <Button 
              onClick={() => window.open('https://supabase.com/dashboard', '_blank')}
              className="bg-green-600 hover:bg-green-700"
            >
              <ExternalLink className="w-4 h-4 mr-2" />
              Start with Dashboard
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}